;
; File generated by cc65 v 2.19 - Git 4f87c7c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4f87c7c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_vram_adr
	.import		_vram_unrle
	.import		_set_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_gray_line
	.export		_RoundSprL
	.export		_RoundSprR
	.export		_CoinSpr
	.export		_BigCoinSpr
	.export		_CoinHud
	.export		_EnemyChaseSpr
	.export		_EnemyBounceSpr
	.export		_EnemyBounceSpr2
	.export		_pad1
	.export		_pad1_new
	.export		_game_state
	.export		_temp_byte_1
	.export		_temp_byte_2
	.export		_temp_byte_3
	.export		_temp_byte_4
	.export		_players
	.export		_palette
	.export		_playfield_screen
	.export		_move_player
	.export		_draw_player
	.export		_main

.segment	"RODATA"

_RoundSprL:
	.byte	$FF
	.byte	$FC
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$FC
	.byte	$03
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$12
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$13
	.byte	$00
	.byte	$80
_RoundSprR:
	.byte	$FF
	.byte	$FC
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$FC
	.byte	$01
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$10
	.byte	$00
	.byte	$07
	.byte	$04
	.byte	$11
	.byte	$00
	.byte	$80
_CoinSpr:
	.byte	$FF
	.byte	$FF
	.byte	$20
	.byte	$01
	.byte	$FF
	.byte	$07
	.byte	$30
	.byte	$01
	.byte	$80
_BigCoinSpr:
	.byte	$FF
	.byte	$FF
	.byte	$21
	.byte	$01
	.byte	$FF
	.byte	$07
	.byte	$31
	.byte	$01
	.byte	$07
	.byte	$FF
	.byte	$22
	.byte	$01
	.byte	$07
	.byte	$07
	.byte	$32
	.byte	$01
	.byte	$80
_CoinHud:
	.byte	$00
	.byte	$00
	.byte	$23
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$24
	.byte	$01
	.byte	$00
	.byte	$08
	.byte	$33
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$34
	.byte	$01
	.byte	$80
_EnemyChaseSpr:
	.byte	$FF
	.byte	$FF
	.byte	$04
	.byte	$02
	.byte	$07
	.byte	$FF
	.byte	$05
	.byte	$02
	.byte	$FF
	.byte	$07
	.byte	$14
	.byte	$02
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$02
	.byte	$80
_EnemyBounceSpr:
	.byte	$FF
	.byte	$FF
	.byte	$06
	.byte	$03
	.byte	$07
	.byte	$FF
	.byte	$07
	.byte	$03
	.byte	$FF
	.byte	$07
	.byte	$16
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$17
	.byte	$03
	.byte	$80
_EnemyBounceSpr2:
	.byte	$FF
	.byte	$FF
	.byte	$04
	.byte	$03
	.byte	$07
	.byte	$FF
	.byte	$05
	.byte	$03
	.byte	$FF
	.byte	$07
	.byte	$14
	.byte	$03
	.byte	$07
	.byte	$07
	.byte	$15
	.byte	$03
	.byte	$80
_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_playfield_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$41
	.byte	$43
	.byte	$01
	.byte	$1B
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$53
	.byte	$01
	.byte	$1B
	.byte	$62
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$0F
	.byte	$08
	.byte	$19
	.byte	$08
	.byte	$0F
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$06
	.byte	$0F
	.byte	$08
	.byte	$04
	.byte	$15
	.byte	$36
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$16
	.byte	$06
	.byte	$12
	.byte	$15
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$0F
	.byte	$0C
	.byte	$19
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$17
	.byte	$04
	.byte	$15
	.byte	$0A
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$07
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$53
	.byte	$01
	.byte	$1B
	.byte	$52
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$A0
	.byte	$01
	.byte	$07
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$A2
	.byte	$A0
	.byte	$01
	.byte	$05
	.byte	$A8
	.byte	$5D
	.byte	$5F
	.byte	$01
	.byte	$05
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_game_state:
	.res	1,$00
_temp_byte_1:
	.res	1,$00
_temp_byte_2:
	.res	1,$00
_temp_byte_3:
	.res	1,$00
_temp_byte_4:
	.res	1,$00
.segment	"BSS"
_players:
	.res	4,$00

; ---------------------------------------------------------------
; void __near__ move_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_player: near

.segment	"CODE"

;
; temp_byte_1 = players[0].x;
;
	lda     _players
	sta     _temp_byte_1
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L0013
;
; temp_byte_1 -= PLAYER_SPEED;
;
	lda     _temp_byte_1
	sec
	sbc     #$03
	sta     _temp_byte_1
;
; if (temp_byte_1 <= PLAYFIELD_LEFT_WALL) {
;
	cmp     #$0F
	bcs     L0014
;
; players[0].x = PLAYFIELD_LEFT_WALL;
;
	lda     #$0E
;
; } else {
;
	jmp     L0010
;
; } else if (pad1 & PAD_RIGHT) {
;
L0013:	lda     _pad1
	and     #$01
	beq     L0015
;
; temp_byte_1 += PLAYER_SPEED;
;
	lda     #$03
	clc
	adc     _temp_byte_1
	sta     _temp_byte_1
;
; if (temp_byte_1 >= PLAYFIELD_RIGHT_WALL) {
;
	cmp     #$EA
	bcc     L0014
;
; players[0].x = PLAYFIELD_RIGHT_WALL;
;
	lda     #$EA
;
; } else {
;
	jmp     L0010
;
; players[0].x = temp_byte_1;
;
L0014:	lda     _temp_byte_1
L0010:	sta     _players
;
; temp_byte_1 = players[0].y;
;
L0015:	lda     _players+1
	sta     _temp_byte_1
;
; if (pad1 & PAD_DOWN) {
;
	lda     _pad1
	and     #$04
	beq     L0017
;
; temp_byte_1 += PLAYER_SPEED;
;
	lda     #$03
	clc
	adc     _temp_byte_1
	sta     _temp_byte_1
;
; if (temp_byte_1 >= PLAYFIELD_BOTTOM_WALL) {
;
	cmp     #$B1
	bcc     L0018
;
; players[0].y = PLAYFIELD_BOTTOM_WALL;
;
	lda     #$B1
;
; } else {
;
	jmp     L0011
;
; } else if (pad1 & PAD_UP) {
;
L0017:	lda     _pad1
	and     #$08
	beq     L000F
;
; temp_byte_1 -= PLAYER_SPEED;
;
	lda     _temp_byte_1
	sec
	sbc     #$03
	sta     _temp_byte_1
;
; if (temp_byte_1 <= PLAYFIELD_TOP_WALL) {
;
	cmp     #$16
	bcs     L0018
;
; players[0].y = PLAYFIELD_TOP_WALL;
;
	lda     #$15
;
; } else {
;
	jmp     L0011
;
; players[0].y = temp_byte_1;
;
L0018:	lda     _temp_byte_1
L0011:	sta     _players+1
;
; }
;
L000F:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player: near

.segment	"CODE"

;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_spr(players[0].x, players[0].y, 0x14, 0);
;
	jsr     decsp3
	lda     _players
	ldy     #$02
	sta     (sp),y
	lda     _players+1
	dey
	sta     (sp),y
	lda     #$14
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; game_state = GAME_STATE_PLAYING;
;
	lda     #$01
	sta     _game_state
;
; players[0].x = 0x66;
;
	lda     #$66
	sta     _players
;
; players[0].y = 0x66;
;
	sta     _players+1
;
; pal_bg(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(playfield_screen);
;
	lda     #<(_playfield_screen)
	ldx     #>(_playfield_screen)
	jsr     _vram_unrle
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (game_state == GAME_STATE_PLAYING) {
;
	jmp     L0008
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; move_player();
;
	jsr     _move_player
;
; draw_player();
;
	jsr     _draw_player
;
; gray_line();
;
	jsr     _gray_line
;
; while (game_state == GAME_STATE_PLAYING) {
;
L0008:	lda     _game_state
	cmp     #$01
	beq     L0005
;
; while (1) {
;
	jmp     L0008

.endproc

