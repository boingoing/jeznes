;
; File generated by cc65 v 2.19 - Git 4f87c7c
;
	.fopt		compiler,"cc65 v 2.19 - Git 4f87c7c"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_oam_meta_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_vram_adr
	.import		_vram_unrle
	.import		_memcpy
	.import		_set_vram_buffer
	.import		_one_vram_buffer
	.import		_clear_vram_buffer
	.import		_get_pad_new
	.import		_get_frame_count
	.import		_get_ppu_addr
	.import		_gray_line
	.import		_seed_rng
	.export		_player_metasprite_0_data
	.export		_player_metasprite_1_data
	.export		_player_metasprite_2_data
	.export		_player_metasprite_3_data
	.export		_player_metasprite_list
	.export		_playfield_pattern_1
	.export		_pad1
	.export		_pad1_new
	.export		_game_state
	.export		_current_level
	.export		_temp_byte_1
	.export		_temp_byte_2
	.export		_temp_byte_3
	.export		_temp_byte_4
	.export		_temp_byte_5
	.export		_temp_signed_byte_1
	.export		_temp_int_1
	.export		_players
	.export		_balls
	.export		_playfield
	.export		_palette
	.export		_playfield_screen
	.export		_init_game
	.export		_load_playfield
	.export		_move_player
	.export		_move_balls
	.export		_draw_player
	.export		_draw_balls
	.export		_start_line
	.export		_draw_tile_highlight
	.export		_flip_player_orientation
	.export		_main

.segment	"RODATA"

_player_metasprite_0_data:
	.byte	$00
	.byte	$00
	.byte	$19
	.byte	$80
	.byte	$00
	.byte	$F8
	.byte	$19
	.byte	$00
	.byte	$80
_player_metasprite_1_data:
	.byte	$00
	.byte	$00
	.byte	$1A
	.byte	$80
	.byte	$00
	.byte	$F8
	.byte	$1A
	.byte	$00
	.byte	$80
_player_metasprite_2_data:
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$09
	.byte	$00
	.byte	$80
_player_metasprite_3_data:
	.byte	$00
	.byte	$00
	.byte	$0A
	.byte	$40
	.byte	$F8
	.byte	$00
	.byte	$0A
	.byte	$00
	.byte	$80
_player_metasprite_list:
	.addr	_player_metasprite_0_data
	.addr	_player_metasprite_1_data
	.addr	_player_metasprite_2_data
	.addr	_player_metasprite_3_data
_playfield_pattern_1:
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
	.byte	$01
_palette:
	.byte	$0F
	.byte	$00
	.byte	$10
	.byte	$30
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
	.byte	$0F
	.byte	$06
	.byte	$16
	.byte	$26
	.byte	$0F
	.byte	$09
	.byte	$19
	.byte	$29
_playfield_screen:
	.byte	$01
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$41
	.byte	$43
	.byte	$01
	.byte	$1B
	.byte	$42
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$61
	.byte	$53
	.byte	$01
	.byte	$1B
	.byte	$62
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$0F
	.byte	$08
	.byte	$19
	.byte	$08
	.byte	$0F
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$06
	.byte	$0F
	.byte	$08
	.byte	$04
	.byte	$15
	.byte	$36
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$16
	.byte	$06
	.byte	$12
	.byte	$15
	.byte	$08
	.byte	$00
	.byte	$01
	.byte	$03
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$0F
	.byte	$0C
	.byte	$19
	.byte	$08
	.byte	$16
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$17
	.byte	$04
	.byte	$15
	.byte	$0A
	.byte	$08
	.byte	$17
	.byte	$00
	.byte	$1E
	.byte	$1E
	.byte	$00
	.byte	$00
	.byte	$1E
	.byte	$01
	.byte	$07
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$01
	.byte	$1B
	.byte	$50
	.byte	$00
	.byte	$00
	.byte	$51
	.byte	$53
	.byte	$01
	.byte	$1B
	.byte	$52
	.byte	$00
	.byte	$01
	.byte	$40
	.byte	$A0
	.byte	$01
	.byte	$07
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$22
	.byte	$00
	.byte	$01
	.byte	$05
	.byte	$88
	.byte	$A2
	.byte	$A0
	.byte	$01
	.byte	$05
	.byte	$A8
	.byte	$5D
	.byte	$5F
	.byte	$01
	.byte	$05
	.byte	$57
	.byte	$00
	.byte	$01
	.byte	$06
	.byte	$00
	.byte	$01
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad1:
	.res	1,$00
_pad1_new:
	.res	1,$00
_game_state:
	.res	1,$00
_current_level:
	.res	1,$00
_temp_byte_1:
	.res	1,$00
_temp_byte_2:
	.res	1,$00
_temp_byte_3:
	.res	1,$00
_temp_byte_4:
	.res	1,$00
_temp_byte_5:
	.res	1,$00
_temp_signed_byte_1:
	.res	1,$00
_temp_int_1:
	.res	2,$00
.segment	"BSS"
_players:
	.res	6,$00
_balls:
	.res	80,$00
_playfield:
	.res	704,$00

; ---------------------------------------------------------------
; void __near__ init_game (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_init_game: near

.segment	"CODE"

;
; pal_bg(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_bg
;
; pal_spr(palette);
;
	lda     #<(_palette)
	ldx     #>(_palette)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_unrle(playfield_screen);
;
	lda     #<(_playfield_screen)
	ldx     #>(_playfield_screen)
	jsr     _vram_unrle
;
; seed_rng();
;
	jsr     _seed_rng
;
; game_state = GAME_STATE_PLAYING;
;
	lda     #$01
	sta     _game_state
;
; current_level = 1;
;
	sta     _current_level
;
; players[0].x = 0x86;
;
	lda     #$86
	sta     _players
;
; players[0].y = 0x66;
;
	lda     #$66
	sta     _players+1
;
; players[0].orientation = PLAYER_ORIENTATION_HORIZ;
;
	lda     #$00
	sta     _players+2
;
; for (temp_byte_1 = 0; temp_byte_1 < current_level; ++temp_byte_1) {
;
	sta     _temp_byte_1
L000A:	lda     _temp_byte_1
	cmp     _current_level
	bcs     L000B
;
; balls[temp_byte_1].x = rand8();
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	tay
	txa
	adc     #>(_balls)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	ldy     #$00
	jsr     staspidx
;
; balls[temp_byte_1].y = rand8();
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	tay
	txa
	adc     #>(_balls)
	tax
	tya
	jsr     pushax
	jsr     _rand8
	ldy     #$01
	jsr     staspidx
;
; balls[temp_byte_1].x_velocity = BALL_SPEED;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	lda     #$01
	ldy     #$02
	sta     (ptr1),y
;
; balls[temp_byte_1].y_velocity = BALL_SPEED;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	lda     #$01
	iny
	sta     (ptr1),y
;
; for (temp_byte_1 = 0; temp_byte_1 < current_level; ++temp_byte_1) {
;
	inc     _temp_byte_1
	jmp     L000A
;
; for (temp_byte_1 = current_level; temp_byte_1 < MAX_BALLS; ++temp_byte_1) {
;
L000B:	lda     _current_level
	sta     _temp_byte_1
L000C:	lda     _temp_byte_1
	cmp     #$14
	bcs     L0007
;
; balls[temp_byte_1].y = 0xff;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	lda     #$FF
	ldy     #$01
	sta     (ptr1),y
;
; for (temp_byte_1 = current_level; temp_byte_1 < MAX_BALLS; ++temp_byte_1) {
;
	inc     _temp_byte_1
	jmp     L000C
;
; load_playfield();
;
L0007:	jmp     _load_playfield

.endproc

; ---------------------------------------------------------------
; void __near__ load_playfield (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_load_playfield: near

.segment	"CODE"

;
; memcpy(&playfield, &playfield_pattern_1, PLAYFIELD_WIDTH*PLAYFIELD_HEIGHT);
;
	lda     #<(_playfield)
	ldx     #>(_playfield)
	jsr     pushax
	lda     #<(_playfield_pattern_1)
	ldx     #>(_playfield_pattern_1)
	jsr     pushax
	ldx     #$02
	lda     #$C0
	jmp     _memcpy

.endproc

; ---------------------------------------------------------------
; void __near__ move_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_player: near

.segment	"CODE"

;
; temp_byte_1 = players[0].x;
;
	lda     _players
	sta     _temp_byte_1
;
; if (pad1 & PAD_LEFT) {
;
	lda     _pad1
	and     #$02
	beq     L001D
;
; temp_byte_1 -= PLAYER_SPEED;
;
	lda     _temp_byte_1
	sec
	sbc     #$03
	sta     _temp_byte_1
;
; if (players[0].orientation & PLAYER_ORIENTATION_VERT) {
;
	lda     _players+2
	and     #$01
	beq     L001A
;
; temp_byte_2 = PLAYFIELD_LEFT_WALL;
;
	lda     #$0E
;
; } else {
;
	jmp     L0016
;
; temp_byte_2 = PLAYFIELD_LEFT_WALL + 8;
;
L001A:	lda     #$16
L0016:	sta     _temp_byte_2
;
; if (temp_byte_1 <= temp_byte_2) {
;
	lda     _temp_byte_1
	cmp     _temp_byte_2
	beq     L001B
	bcs     L001E
;
; players[0].x = temp_byte_2;
;
L001B:	lda     _temp_byte_2
;
; } else {
;
	jmp     L0017
;
; } else if (pad1 & PAD_RIGHT) {
;
L001D:	lda     _pad1
	and     #$01
	beq     L001F
;
; temp_byte_1 += PLAYER_SPEED;
;
	lda     #$03
	clc
	adc     _temp_byte_1
	sta     _temp_byte_1
;
; if (temp_byte_1 >= PLAYFIELD_RIGHT_WALL) {
;
	cmp     #$EA
	bcc     L001E
;
; players[0].x = PLAYFIELD_RIGHT_WALL;
;
	lda     #$EA
;
; } else {
;
	jmp     L0017
;
; players[0].x = temp_byte_1;
;
L001E:	lda     _temp_byte_1
L0017:	sta     _players
;
; temp_byte_1 = players[0].y;
;
L001F:	lda     _players+1
	sta     _temp_byte_1
;
; if (pad1 & PAD_DOWN) {
;
	lda     _pad1
	and     #$04
	beq     L0021
;
; temp_byte_1 += PLAYER_SPEED;
;
	lda     #$03
	clc
	adc     _temp_byte_1
	sta     _temp_byte_1
;
; if (temp_byte_1 >= PLAYFIELD_BOTTOM_WALL) {
;
	cmp     #$B1
	bcc     L0024
;
; players[0].y = PLAYFIELD_BOTTOM_WALL;
;
	lda     #$B1
;
; } else {
;
	jmp     L0018
;
; } else if (pad1 & PAD_UP) {
;
L0021:	lda     _pad1
	and     #$08
	beq     L0013
;
; temp_byte_1 -= PLAYER_SPEED;
;
	lda     _temp_byte_1
	sec
	sbc     #$03
	sta     _temp_byte_1
;
; if (players[0].orientation & PLAYER_ORIENTATION_VERT) {
;
	lda     _players+2
	and     #$01
	beq     L0022
;
; temp_byte_2 = PLAYFIELD_TOP_WALL + 8;
;
	lda     #$1D
;
; } else {
;
	jmp     L0019
;
; temp_byte_2 = PLAYFIELD_TOP_WALL;
;
L0022:	lda     #$15
L0019:	sta     _temp_byte_2
;
; if (temp_byte_1 <= temp_byte_2) {
;
	lda     _temp_byte_1
	cmp     _temp_byte_2
	beq     L0023
	bcs     L0024
;
; players[0].y = temp_byte_2;
;
L0023:	lda     _temp_byte_2
;
; } else {
;
	jmp     L0018
;
; players[0].y = temp_byte_1;
;
L0024:	lda     _temp_byte_1
L0018:	sta     _players+1
;
; }
;
L0013:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ move_balls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_move_balls: near

.segment	"CODE"

;
; for (temp_byte_1 = 0; temp_byte_1 < current_level; ++temp_byte_1) {
;
	lda     #$00
	sta     _temp_byte_1
L0022:	lda     _temp_byte_1
	cmp     _current_level
	bcc     L002B
;
; }
;
	rts
;
; temp_signed_byte_1 = balls[temp_byte_1].x_velocity;
;
L002B:	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	tay
	txa
	adc     #>(_balls)
	tax
	tya
	ldy     #$02
	jsr     ldaidx
	sta     _temp_signed_byte_1
;
; temp_byte_2 = balls[temp_byte_1].x;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_balls)
	sta     ptr1+1
	ldy     #<(_balls)
	lda     (ptr1),y
	sta     _temp_byte_2
;
; temp_byte_2 += temp_signed_byte_1;
;
	lda     _temp_signed_byte_1
	clc
	adc     _temp_byte_2
	sta     _temp_byte_2
;
; temp_byte_5 = balls[temp_byte_1].y >> 3;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_byte_5
;
; if (temp_signed_byte_1 > 0) {
;
	lda     _temp_signed_byte_1
	sec
	sbc     #$01
	bvs     L0009
	eor     #$80
L0009:	bpl     L0025
;
; temp_byte_4 = (temp_byte_2 + 7) >> 3;
;
	ldx     #$00
	lda     _temp_byte_2
	clc
	adc     #$07
	bcc     L000A
	inx
L000A:	jsr     asrax3
	sta     _temp_byte_4
;
; temp_int_1 = temp_byte_4 + 32 * temp_byte_5 - PLAYFIELD_FIRST_TILE_INDEX;
;
	ldx     #$00
	lda     _temp_byte_5
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_byte_4
	bcc     L001C
	inx
L001C:	sec
	sbc     #$40
	bcs     L000B
	dex
L000B:	sta     _temp_int_1
	stx     _temp_int_1+1
;
; temp_byte_4 = (temp_byte_4 << 3) - 8;
;
	lda     _temp_byte_4
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$08
;
; } else {
;
	jmp     L0020
;
; temp_byte_4 = temp_byte_2 >> 3;
;
L0025:	lda     _temp_byte_2
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_byte_4
;
; temp_int_1 = temp_byte_4 + 32 * temp_byte_5 - PLAYFIELD_FIRST_TILE_INDEX;
;
	ldx     #$00
	lda     _temp_byte_5
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_byte_4
	bcc     L001D
	inx
L001D:	sec
	sbc     #$40
	bcs     L000E
	dex
L000E:	sta     _temp_int_1
	stx     _temp_int_1+1
;
; temp_byte_4 = (temp_byte_4 << 3) + 8;
;
	lda     _temp_byte_4
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
L0020:	sta     _temp_byte_4
;
; temp_byte_3 = playfield[temp_int_1];
;
	lda     _temp_int_1
	sta     ptr1
	lda     _temp_int_1+1
	clc
	adc     #>(_playfield)
	sta     ptr1+1
	ldy     #<(_playfield)
	lda     (ptr1),y
	sta     _temp_byte_3
;
; if (temp_byte_3 == PLAYFIELD_WALL) {
;
	ldx     #$00
	lda     _temp_byte_3
	cmp     #$01
	bne     L0026
;
; balls[temp_byte_1].x_velocity *= -1;
;
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	tay
	txa
	adc     #>(_balls)
	tax
	tya
	sta     sreg
	stx     sreg+1
	ldy     #$02
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	sta     (sreg),y
;
; temp_byte_2 = temp_byte_4;
;
	lda     _temp_byte_4
	sta     _temp_byte_2
;
; balls[temp_byte_1].x = temp_byte_2;
;
	ldx     #$00
L0026:	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	lda     _temp_byte_2
	ldy     #$00
	sta     (ptr1),y
;
; temp_signed_byte_1 = balls[temp_byte_1].y_velocity;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	tay
	txa
	adc     #>(_balls)
	tax
	tya
	ldy     #$03
	jsr     ldaidx
	sta     _temp_signed_byte_1
;
; temp_byte_2 = balls[temp_byte_1].y;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _temp_byte_2
;
; temp_byte_2 += temp_signed_byte_1;
;
	lda     _temp_signed_byte_1
	clc
	adc     _temp_byte_2
	sta     _temp_byte_2
;
; temp_byte_5 = balls[temp_byte_1].x >> 3;
;
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_balls)
	sta     ptr1+1
	ldy     #<(_balls)
	lda     (ptr1),y
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_byte_5
;
; if (temp_signed_byte_1 > 0) {
;
	lda     _temp_signed_byte_1
	sec
	sbc     #$01
	bvs     L0014
	eor     #$80
L0014:	bpl     L0029
;
; temp_byte_4 = (temp_byte_2 + 7) >> 3;
;
	ldx     #$00
	lda     _temp_byte_2
	clc
	adc     #$07
	bcc     L0015
	inx
L0015:	jsr     asrax3
	sta     _temp_byte_4
;
; temp_int_1 = temp_byte_5 + 32 * temp_byte_4 - PLAYFIELD_FIRST_TILE_INDEX;
;
	ldx     #$00
	lda     _temp_byte_4
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_byte_5
	bcc     L001E
	inx
L001E:	sec
	sbc     #$40
	bcs     L0016
	dex
L0016:	sta     _temp_int_1
	stx     _temp_int_1+1
;
; temp_byte_4 = (temp_byte_4 << 3) - 8;
;
	lda     _temp_byte_4
	asl     a
	asl     a
	asl     a
	sec
	sbc     #$08
;
; } else {
;
	jmp     L0021
;
; temp_byte_4 = temp_byte_2 >> 3;
;
L0029:	lda     _temp_byte_2
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_byte_4
;
; temp_int_1 = temp_byte_5 + 32 * temp_byte_4 - PLAYFIELD_FIRST_TILE_INDEX;
;
	ldx     #$00
	lda     _temp_byte_4
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	ldx     tmp1
	clc
	adc     _temp_byte_5
	bcc     L001F
	inx
L001F:	sec
	sbc     #$40
	bcs     L0019
	dex
L0019:	sta     _temp_int_1
	stx     _temp_int_1+1
;
; temp_byte_4 = (temp_byte_4 << 3) + 8;
;
	lda     _temp_byte_4
	asl     a
	asl     a
	asl     a
	clc
	adc     #$08
L0021:	sta     _temp_byte_4
;
; temp_byte_3 = playfield[temp_int_1];
;
	lda     _temp_int_1
	sta     ptr1
	lda     _temp_int_1+1
	clc
	adc     #>(_playfield)
	sta     ptr1+1
	ldy     #<(_playfield)
	lda     (ptr1),y
	sta     _temp_byte_3
;
; if (temp_byte_3 == PLAYFIELD_WALL) {
;
	ldx     #$00
	lda     _temp_byte_3
	cmp     #$01
	bne     L002A
;
; balls[temp_byte_1].y_velocity *= -1;
;
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	tay
	txa
	adc     #>(_balls)
	tax
	tya
	sta     sreg
	stx     sreg+1
	ldy     #$03
	jsr     ldaidx
	eor     #$FF
	clc
	adc     #$01
	sta     (sreg),y
;
; temp_byte_2 = temp_byte_4;
;
	lda     _temp_byte_4
	sta     _temp_byte_2
;
; balls[temp_byte_1].y = temp_byte_2;
;
	ldx     #$00
L002A:	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	lda     _temp_byte_2
	ldy     #$01
	sta     (ptr1),y
;
; for (temp_byte_1 = 0; temp_byte_1 < current_level; ++temp_byte_1) {
;
	inc     _temp_byte_1
	jmp     L0022

.endproc

; ---------------------------------------------------------------
; void __near__ draw_player (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_player: near

.segment	"CODE"

;
; temp_byte_1 = get_frame_count();
;
	jsr     _get_frame_count
	sta     _temp_byte_1
;
; temp_byte_1 = temp_byte_1 >> 3 & 1;
;
	lsr     a
	lsr     a
	lsr     a
	and     #$01
	sta     _temp_byte_1
;
; if (players[0].orientation & PLAYER_ORIENTATION_VERT) {
;
	lda     _players+2
	and     #$01
	beq     L0008
;
; temp_byte_2 = temp_byte_1;
;
	lda     _temp_byte_1
;
; } else {
;
	jmp     L0006
;
; temp_byte_2 = 2 + temp_byte_1;
;
L0008:	lda     _temp_byte_1
	clc
	adc     #$02
L0006:	sta     _temp_byte_2
;
; oam_meta_spr(players[0].x, players[0].y, player_metasprite_list[temp_byte_2]);
;
	jsr     decsp2
	lda     _players
	ldy     #$01
	sta     (sp),y
	lda     _players+1
	dey
	sta     (sp),y
	ldx     #$00
	lda     _temp_byte_2
	asl     a
	bcc     L0007
	inx
	clc
L0007:	adc     #<(_player_metasprite_list)
	sta     ptr1
	txa
	adc     #>(_player_metasprite_list)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jmp     _oam_meta_spr

.endproc

; ---------------------------------------------------------------
; void __near__ draw_balls (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_balls: near

.segment	"CODE"

;
; for (temp_byte_1 = 0; temp_byte_1 < current_level; ++temp_byte_1) {
;
	lda     #$00
	sta     _temp_byte_1
L0006:	lda     _temp_byte_1
	cmp     _current_level
	bcs     L0003
;
; oam_spr(balls[temp_byte_1].x, balls[temp_byte_1].y, 0x4, 0);
;
	jsr     decsp3
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	sta     ptr1
	txa
	clc
	adc     #>(_balls)
	sta     ptr1+1
	ldy     #<(_balls)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
	ldx     #$00
	lda     _temp_byte_1
	jsr     aslax2
	clc
	adc     #<(_balls)
	sta     ptr1
	txa
	adc     #>(_balls)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; for (temp_byte_1 = 0; temp_byte_1 < current_level; ++temp_byte_1) {
;
	inc     _temp_byte_1
	jmp     L0006
;
; }
;
L0003:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ start_line (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_start_line: near

.segment	"CODE"

;
; if (pad1 & PAD_A) {
;
	lda     _pad1
	and     #$80
	beq     L0002
;
; temp_byte_1 = players[0].x - PLAYFIELD_LEFT_WALL + 0x3;
;
	lda     _players
	sec
	sbc     #$0E
	clc
	adc     #$03
	sta     _temp_byte_1
;
; temp_byte_1 = temp_byte_1 >> 3;
;
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_byte_1
;
; temp_byte_2 = players[0].y - PLAYFIELD_TOP_WALL + 0x3;
;
	lda     _players+1
	sec
	sbc     #$15
	clc
	adc     #$03
	sta     _temp_byte_2
;
; temp_byte_2 = temp_byte_2 >> 3;
;
	lsr     a
	lsr     a
	lsr     a
	sta     _temp_byte_2
;
; temp_int_1 = get_ppu_addr(0, players[0].x, players[0].y);
;
	jsr     decsp2
	lda     #$00
	ldy     #$01
	sta     (sp),y
	lda     _players
	dey
	sta     (sp),y
	lda     _players+1
	jsr     _get_ppu_addr
	sta     _temp_int_1
	stx     _temp_int_1+1
;
; one_vram_buffer(0xff, temp_int_1);
;
	lda     #$FF
	jsr     pusha
	lda     _temp_int_1
	ldx     _temp_int_1+1
	jmp     _one_vram_buffer
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ draw_tile_highlight (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_draw_tile_highlight: near

.segment	"CODE"

;
; if (players[0].orientation & PLAYER_ORIENTATION_VERT) {
;
	lda     _players+2
	and     #$01
	beq     L0007
;
; temp_byte_3 = players[0].x + 4;
;
	lda     _players
	clc
	adc     #$04
	sta     _temp_byte_3
;
; temp_byte_4 = players[0].y;
;
	lda     _players+1
;
; } else {
;
	jmp     L0006
;
; temp_byte_3 = players[0].x;
;
L0007:	lda     _players
	sta     _temp_byte_3
;
; temp_byte_4 = players[0].y + 4;
;
	lda     _players+1
	clc
	adc     #$04
L0006:	sta     _temp_byte_4
;
; temp_byte_1 = temp_byte_3 >> 3 << 3;
;
	lda     _temp_byte_3
	lsr     a
	lsr     a
	lsr     a
	asl     a
	asl     a
	asl     a
	sta     _temp_byte_1
;
; temp_byte_2 = temp_byte_4 >> 3 << 3;
;
	lda     _temp_byte_4
	lsr     a
	lsr     a
	lsr     a
	asl     a
	asl     a
	asl     a
	sta     _temp_byte_2
;
; oam_spr(temp_byte_1, temp_byte_2, 0x22, 0);
;
	jsr     decsp3
	lda     _temp_byte_1
	ldy     #$02
	sta     (sp),y
	lda     _temp_byte_2
	dey
	sta     (sp),y
	lda     #$22
	dey
	sta     (sp),y
	tya
	jmp     _oam_spr

.endproc

; ---------------------------------------------------------------
; void __near__ flip_player_orientation (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_flip_player_orientation: near

.segment	"CODE"

;
; if (pad1 & PAD_B) {
;
	lda     _pad1
	and     #$40
	beq     L0002
;
; players[0].orientation = players[0].orientation ^ 1;
;
	lda     _players+2
	eor     #$01
	sta     _players+2
;
; }
;
L0002:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; bank_spr(0);
;
	lda     #$00
	jsr     _bank_spr
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; init_game();
;
	jsr     _init_game
;
; set_vram_buffer();
;
	jsr     _set_vram_buffer
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (game_state == GAME_STATE_PLAYING) {
;
	jmp     L0008
;
; ppu_wait_nmi();
;
L0005:	jsr     _ppu_wait_nmi
;
; pad1 = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad1
;
; pad1_new = get_pad_new(0);
;
	lda     #$00
	jsr     _get_pad_new
	sta     _pad1_new
;
; clear_vram_buffer();
;
	jsr     _clear_vram_buffer
;
; flip_player_orientation();
;
	jsr     _flip_player_orientation
;
; start_line();
;
	jsr     _start_line
;
; move_player();
;
	jsr     _move_player
;
; move_balls();
;
	jsr     _move_balls
;
; oam_clear();
;
	jsr     _oam_clear
;
; draw_player();
;
	jsr     _draw_player
;
; draw_balls();
;
	jsr     _draw_balls
;
; draw_tile_highlight();
;
	jsr     _draw_tile_highlight
;
; gray_line();
;
	jsr     _gray_line
;
; while (game_state == GAME_STATE_PLAYING) {
;
L0008:	lda     _game_state
	cmp     #$01
	beq     L0005
;
; while (1) {
;
	jmp     L0008

.endproc

